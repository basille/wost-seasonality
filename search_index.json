[
["index.html", "Joint seasonality in geographic and ecological spaces, illustrated with a partially migratory bird 1 Introduction", " Joint seasonality in geographic and ecological spaces, illustrated with a partially migratory bird Mathieu Basille, James Watling, Stephanie Romañach, Rena Borkhataria 2019-10-31 1 Introduction Note: This is the companion website for the manuscript “Joint seasonality in geographic and ecological spaces, illustrated with a partially migratory bird”, from Basille et al., available as a preprint here. This study will introduce a simple idea, the variation of the climatic niche through time. More precisely, we are investigating how the climatic niche of wood stork changes within the year, following monthly variation in temperature and precipitation. This will be assessed in parallel with the geographical distribution of wood stork through time. To give some context, here are the movements of a sample of the wood storks through time: Video of wood stork movements. "],
["data.html", "2 Data preprocessing 2.1 Data import: GPS and raster data 2.2 Environmental intersection 2.3 Sampling the point data", " 2 Data preprocessing 2.1 Data import: GPS and raster data I start by importing GPS data of adults only (without individuals from the Jacksonville zoo), in the form of trajectories (ltraj) that is converted to point data (SpatialPointsDataFrame) and projected to Lat/Long: library(&quot;hab&quot;) load(&quot;Data/wost-ad-ltraj.RData&quot;) library(&quot;rgdal&quot;) wost &lt;- hab::ltraj2spdf(trajad, strict = FALSE, proj4string = CRS(&quot;+init=epsg:32617&quot;)) wost$id &lt;- factor(wost$id) wost &lt;- subset(wost, !(id %in% c(407680, 429200, 476550, 721310, 721320))) wost &lt;- spTransform(wost, CRS(&quot;+proj=longlat +datum=WGS84&quot;)) summary(wost) ## Object of class SpatialPointsDataFrame ## Coordinates: ## min max ## x -91.45783 -78.01650 ## y 25.08267 34.60033 ## Is projected: FALSE ## proj4string : ## [+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0] ## Number of points: 445638 ## Data attributes: ## date dx dy ## Min. :2005-07-29 07:00:00 Min. :-90334.77 Min. :-127323.69 ## 1st Qu.:2007-09-28 19:00:00 1st Qu.: -30.13 1st Qu.: -19.90 ## Median :2009-07-09 17:00:00 Median : 0.00 Median : 0.00 ## Mean :2009-04-11 15:12:47 Mean : 5.56 Mean : -12.55 ## 3rd Qu.:2010-10-29 20:00:00 3rd Qu.: 31.28 3rd Qu.: 19.58 ## Max. :2011-12-31 18:00:00 Max. :133219.05 Max. : 148420.54 ## NA&#39;s :36011 NA&#39;s :36011 ## dist dt R2n ## Min. : 0.00 Min. :3600 Min. : 0 ## 1st Qu.: 16.76 1st Qu.:3600 1st Qu.: 108970 ## Median : 49.76 Median :3600 Median : 9802756 ## Mean : 1544.56 Mean :4777 Mean : 24050154883 ## 3rd Qu.: 639.01 3rd Qu.:7200 3rd Qu.: 1192219334 ## Max. :150312.14 Max. :7200 Max. :1005475966130 ## NA&#39;s :36011 NA&#39;s :22863 ## abs.angle rel.angle id burst ## Min. :-3.14 Min. :-3.14 572931 : 29866 414590 : 21736 ## 1st Qu.:-1.57 1st Qu.:-1.57 414590 : 21736 414240 : 18336 ## Median : 0.00 Median : 0.15 414240 : 18336 414580 : 14595 ## Mean : 0.09 Mean : 0.18 721290 : 16319 416110 : 14110 ## 3rd Qu.: 1.57 3rd Qu.: 2.04 723560 : 15763 407700 : 13064 ## Max. : 3.14 Max. : 3.14 414580 : 14595 414260 : 12473 ## NA&#39;s :110418 NA&#39;s :143287 (Other):329023 (Other):351324 ## gid elevation day ## Min. :148996 Min. :-999.0 Min. : 429 ## 1st Qu.:293034 1st Qu.: 3.0 1st Qu.:1220 ## Median :456866 Median : 10.0 Median :1870 ## Mean :442556 Mean :-173.2 Mean :1781 ## 3rd Qu.:584878 3rd Qu.: 28.0 3rd Qu.:2347 ## Max. :701216 Max. :2032.0 Max. :2775 ## NA&#39;s :22873 wost2 &lt;- droplevels(wost@data) length(unique(wost2$id)) ## [1] 61 table(wost2$id) ## ## 407700 407710 414240 414250 414260 414270 414580 414590 414600 414610 ## 13064 1463 18336 5676 12473 2523 14595 21736 8671 628 ## 416100 416110 425120 429190 475171 475180 475192 475220 475241 475270 ## 651 14110 5093 11316 2683 11720 650 2137 19 4867 ## 475282 475284 475302 475322 519770 519790 519800 519810 572661 572662 ## 1790 1245 2729 505 8973 7306 8909 7876 3998 3839 ## 572671 572710 572741 572742 572743 572781 572800 572811 572931 572951 ## 1083 10281 346 2268 3202 4386 1098 5881 29866 7911 ## 572981 572991 721290 721300 723560 723570 723580 723600 723610 809320 ## 4614 8626 16319 9859 15763 2824 2134 2910 7459 5638 ## 809330 809340 910200 910210 910220 910230 910240 992250 992270 992280 ## 805 9165 13990 14474 14269 14105 3372 9188 7607 8761 ## 992290 ## 7853 summary(as.numeric(table(wost2$id))) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 19 2523 5881 7306 10280 29870 sd(as.numeric(table(wost2$id))) ## [1] 6036.537 summary(unlist(by(wost2, wost2$id, function(k) difftime(max(k$date), min(k$date), units = &quot;days&quot;)))) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.25 247.50 527.50 649.10 972.30 2326.00 sd(unlist(by(wost2, wost2$id, function(k) difftime(max(k$date), min(k$date), units = &quot;days&quot;)))) ## [1] 562.5885 I also import environmental data (from files). All rasters are combined in a RasterBrick, which is then masked using a Minimum convex polygon (from adehabitatHR) of every relocations enlarged by a one-cell buffer: library(&quot;raster&quot;) janPrec &lt;- raster(&quot;Data/Consensus_rasters/jan_prec.img&quot;) janTemp &lt;- raster(&quot;Data/Consensus_rasters/jan_temp.img&quot;) febPrec &lt;- raster(&quot;Data/Consensus_rasters/feb_prec.img&quot;) febTemp &lt;- raster(&quot;Data/Consensus_rasters/feb_temp.img&quot;) marPrec &lt;- raster(&quot;Data/Consensus_rasters/mar_prec.img&quot;) marTemp &lt;- raster(&quot;Data/Consensus_rasters/mar_temp.img&quot;) aprPrec &lt;- raster(&quot;Data/Consensus_rasters/apr_prec.img&quot;) aprTemp &lt;- raster(&quot;Data/Consensus_rasters/apr_temp.img&quot;) mayPrec &lt;- raster(&quot;Data/Consensus_rasters/may_prec.img&quot;) mayTemp &lt;- raster(&quot;Data/Consensus_rasters/may_temp.img&quot;) junPrec &lt;- raster(&quot;Data/Consensus_rasters/jun_prec.img&quot;) junTemp &lt;- raster(&quot;Data/Consensus_rasters/jun_temp.img&quot;) julPrec &lt;- raster(&quot;Data/Consensus_rasters/jul_prec.img&quot;) julTemp &lt;- raster(&quot;Data/Consensus_rasters/jul_temp.img&quot;) augPrec &lt;- raster(&quot;Data/Consensus_rasters/aug_prec.img&quot;) augTemp &lt;- raster(&quot;Data/Consensus_rasters/aug_temp.img&quot;) sepPrec &lt;- raster(&quot;Data/Consensus_rasters/sep_prec.img&quot;) sepTemp &lt;- raster(&quot;Data/Consensus_rasters/sep_temp.img&quot;) octPrec &lt;- raster(&quot;Data/Consensus_rasters/oct_prec.img&quot;) octTemp &lt;- raster(&quot;Data/Consensus_rasters/oct_temp.img&quot;) decPrec &lt;- raster(&quot;Data/Consensus_rasters/dec_prec.img&quot;) decTemp &lt;- raster(&quot;Data/Consensus_rasters/dec_temp.img&quot;) novPrec &lt;- raster(&quot;Data/Consensus_rasters/nov_prec.img&quot;) novTemp &lt;- raster(&quot;Data/Consensus_rasters/nov_temp.img&quot;) (rast &lt;- brick(janPrec, janTemp, febPrec, febTemp, marPrec, marTemp, aprPrec, aprTemp, mayPrec, mayTemp, junPrec, junTemp, julPrec, julTemp, augPrec, augTemp, sepPrec, sepTemp, octPrec, octTemp, novPrec, novTemp, decPrec, decTemp)) ## class : RasterBrick ## dimensions : 855, 2156, 1843380, 24 (nrow, ncol, ncell, nlayers) ## resolution : 0.167, 0.167 (x, y) ## extent : -180, 180.052, -59.1665, 83.6185 (xmin, xmax, ymin, ymax) ## crs : NA ## source : /tmp/Rtmp4OILip/raster/r_tmp_2019-10-30_173244_13787_41238.grd ## names : jan_prec, jan_temp, feb_prec, feb_temp, mar_prec, mar_temp, apr_prec, apr_temp, may_prec, may_temp, jun_prec, jun_temp, jul_prec, jul_temp, aug_prec, ... ## min values : 0.00, -51.45, 0.00, -47.45, 0.00, -44.55, 0.00, -35.75, 0.00, -19.80, 0.00, -13.55, 0.00, -10.85, 0.00, ... ## max values : 808.90, 33.10, 714.15, 32.45, 689.05, 32.25, 632.15, 33.90, 965.00, 35.80, 2136.30, 38.35, 2123.25, 38.20, 1538.70, ... library(&quot;rgeos&quot;) sa &lt;- mcp(wost, percent = 100) rast &lt;- crop(rast, gBuffer(sa, width = 0.167)) rast &lt;- mask(rast, gBuffer(sa, width = 0.167)) The result is something like this (using temperatures in January as an example) library(&quot;sf&quot;) library(&quot;maps&quot;) states &lt;- st_as_sf(map(&quot;state&quot;, plot = FALSE, fill = TRUE)) rastDF &lt;- data.frame(rasterToPoints(rast)) library(&quot;cowplot&quot;) library(&quot;viridis&quot;) ggplot() + geom_raster(data = rastDF, aes_string(x = &quot;x&quot;, y = &quot;y&quot;, fill = names(rastDF)[4])) + geom_sf(data = states, fill = NA, size = 0.2, colour = gray(0.2)) + geom_point(data = data.frame(wost), aes(x = x, y = y), shape = 20, size = 0.8, stroke = 0, colour = &quot;gray&quot;) + coord_sf(xlim = c(-92, -77.5), ylim = c(24.5, 35), expand = FALSE) + scale_fill_viridis(end = 0.8, alpha = 1, option = &quot;plasma&quot;) + labs(x = &quot;Latitude&quot;, y = &quot;Longitude&quot;, fill = expression(`Temperature `(degree ~ C))) + theme(legend.position = &quot;top&quot;, legend.justification = &quot;center&quot;) + guides(fill = guide_colourbar(barwidth = 15, barheight = 1, title.theme = element_text(size = 26))) Figure 2.1: Temperature in January. 2.2 Environmental intersection We first look at the frequency of data for each month: library(&quot;lubridate&quot;) wost$month &lt;- month(wost$date) table(wost$month) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 28931 26156 30298 33741 40787 38467 42136 44483 43625 42663 38409 35942 plot(table(wost$month), ylab = &quot;Frequency&quot;, xlab = &quot;Month&quot;) Figure 2.2: Frequency of data per month. We then intersect the GPS data to the precipitation and temperature layers, using the month number to identify the correct layer: wost$prec &lt;- ifelse(wost$month == 1, extract(janPrec, wost), ifelse(wost$month == 2, extract(febPrec, wost), ifelse(wost$month == 3, extract(marPrec, wost), ifelse(wost$month == 4, extract(aprPrec, wost), ifelse(wost$month == 5, extract(mayPrec, wost), ifelse(wost$month == 6, extract(junPrec, wost), ifelse(wost$month == 7, extract(julPrec, wost), ifelse(wost$month == 8, extract(augPrec, wost), ifelse(wost$month == 9, extract(sepPrec, wost), ifelse(wost$month == 10, extract(octPrec, wost), ifelse(wost$month == 11, extract(novPrec, wost), extract(decPrec, wost)))))))))))) wost$temp &lt;- ifelse(wost$month == 1, extract(janTemp, wost), ifelse(wost$month == 2, extract(febTemp, wost), ifelse(wost$month == 3, extract(marTemp, wost), ifelse(wost$month == 4, extract(aprTemp, wost), ifelse(wost$month == 5, extract(mayTemp, wost), ifelse(wost$month == 6, extract(junTemp, wost), ifelse(wost$month == 7, extract(julTemp, wost), ifelse(wost$month == 8, extract(augTemp, wost), ifelse(wost$month == 9, extract(sepTemp, wost), ifelse(wost$month == 10, extract(octTemp, wost), ifelse(wost$month == 11, extract(novTemp, wost), extract(decTemp, wost)))))))))))) Note that the correlation between temperature and precipitation in wood stork use data is pretty high. cor(wost$prec, wost$temp, use = &quot;complete.obs&quot;) ## [1] 0.7965986 plot(wost$prec, wost$temp, pch = 20, xlab = &quot;Precipitation&quot;, ylab = &quot;Temperature&quot;) Figure 2.3: Correlation between precipitation and temperature. 2.3 Sampling the point data In this section, I will sample GPS data to ensure that each individual is represented equally in each month. I first break down the data into a list with one element per month. Over this list, i.e. for each month, individuals with less than 100 locations are removed, and one random location of a random individual (with replacement) is chosen 5000 times, to give each individual the same weight in the sampled data: table(wost$id, wost$month) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 407680 0 0 0 0 0 0 0 0 0 0 0 0 ## 407700 956 856 897 911 1040 950 1325 1371 1211 1257 1295 995 ## 407710 0 0 0 0 0 0 323 308 329 342 161 0 ## 414240 1488 1328 1486 1490 1579 1595 1633 1638 1551 1555 1453 1540 ## 414250 266 311 313 539 637 619 629 693 617 467 290 295 ## 414260 947 739 781 1057 1232 1062 1207 1189 1087 1090 1040 1042 ## 414270 0 0 0 175 317 320 337 327 308 348 319 72 ## 414580 903 855 962 1390 1376 1416 1632 1504 1404 1233 945 975 ## 414590 1530 1373 1637 1902 1980 1937 2058 1963 1927 1990 1840 1599 ## 414600 620 556 554 872 887 809 801 872 778 728 615 579 ## 414610 0 0 0 148 244 236 0 0 0 0 0 0 ## 416100 0 0 36 285 330 0 0 0 0 0 0 0 ## 416110 1005 883 1061 1269 1546 1250 1336 1348 1113 1163 1075 1061 ## 425120 144 132 223 398 466 444 791 692 710 535 374 184 ## 429190 890 718 851 847 952 887 1086 1122 1065 983 1013 902 ## 429200 0 0 0 0 0 0 0 0 0 0 0 0 ## 475171 41 10 279 302 424 491 285 302 174 175 114 86 ## 475180 508 680 1148 1112 1206 1020 1210 1087 1090 982 968 709 ## 475192 0 0 0 331 319 0 0 0 0 0 0 0 ## 475220 94 68 172 242 229 221 217 232 194 208 195 65 ## 475241 0 0 0 0 0 0 19 0 0 0 0 0 ## 475270 277 238 623 659 670 652 530 476 262 142 217 121 ## 475282 0 0 0 0 0 0 356 426 422 434 152 0 ## 475284 0 0 0 20 155 150 156 155 150 154 150 155 ## 475302 317 336 359 396 313 0 24 241 53 133 275 282 ## 475322 0 0 0 0 0 0 0 58 437 10 0 0 ## 476550 0 0 0 0 0 0 0 0 0 0 0 0 ## 519770 457 411 487 452 703 887 926 945 912 952 895 946 ## 519790 467 428 470 439 472 446 617 898 907 917 763 482 ## 519800 462 412 475 432 655 907 959 947 914 936 877 933 ## 519810 470 440 477 446 438 423 625 949 920 901 889 898 ## 572661 213 0 0 365 469 319 465 468 456 455 336 452 ## 572662 156 0 0 0 440 444 434 472 459 480 474 480 ## 572671 0 0 0 385 454 244 0 0 0 0 0 0 ## 572710 712 724 1151 1145 1186 1025 704 641 725 777 723 768 ## 572741 0 0 0 0 0 0 0 131 215 0 0 0 ## 572742 0 0 0 0 0 0 255 444 449 464 404 252 ## 572743 429 384 45 0 427 201 117 214 371 422 250 342 ## 572781 444 20 32 439 467 346 456 442 459 439 384 458 ## 572800 0 0 115 136 121 194 201 245 86 0 0 0 ## 572811 460 407 454 450 455 391 430 151 554 892 780 457 ## 572931 2456 2360 2416 2385 2420 2141 2434 2611 2786 2727 2541 2589 ## 572951 892 786 468 452 423 268 446 643 899 905 858 871 ## 572981 464 396 466 403 408 208 42 481 453 433 442 418 ## 572991 797 737 856 745 451 286 463 879 841 875 849 847 ## 721290 959 1038 1366 1259 1352 1548 1745 1805 1782 1672 940 853 ## 721300 804 864 909 826 684 664 909 900 847 815 781 856 ## 721310 0 0 0 0 0 0 0 0 0 0 0 0 ## 721320 0 0 0 0 0 0 0 0 0 0 0 0 ## 723560 1101 1215 1345 1307 1405 1336 1351 1395 1358 1381 1301 1268 ## 723570 0 0 0 120 360 323 355 351 354 368 321 272 ## 723580 0 0 0 45 356 298 363 359 339 353 21 0 ## 723600 0 0 0 120 361 326 370 363 356 369 360 285 ## 723610 471 470 826 768 633 738 696 757 758 559 406 377 ## 809320 439 410 461 457 647 465 473 476 452 456 454 448 ## 809330 0 0 0 0 135 477 193 0 0 0 0 0 ## 809340 891 588 453 434 576 830 909 926 852 900 901 905 ## 910200 875 794 955 863 1340 1248 1342 1284 1296 1361 1334 1298 ## 910210 913 844 924 887 1353 1309 1364 1377 1357 1406 1367 1373 ## 910220 906 811 950 917 1371 1271 1367 1390 1331 1364 1338 1253 ## 910230 930 819 935 906 1282 1252 1304 1319 1322 1364 1342 1330 ## 910240 0 0 0 0 444 418 458 470 455 483 448 196 ## 992250 445 434 460 472 813 923 948 964 942 954 900 933 ## 992270 466 439 487 450 676 927 928 956 729 484 441 624 ## 992280 431 407 457 441 657 911 922 918 904 916 890 907 ## 992290 435 435 476 450 451 414 610 908 903 954 908 909 summary(as.numeric(table(wost$id))) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0 1876 5366 6752 9691 29870 months &lt;- split(wost, wost$month) for (i in 1:length(months)) months[[i]]$id &lt;- factor(months[[i]]$id) monthLocs &lt;- lapply(months, function(k) { k &lt;- nsubset(k, id, 100) k$id &lt;- factor(k$id) lt &lt;- split(k, k$id) set.seed(34138) sam &lt;- sample(1:length(lt), 5000, replace = TRUE) return(do.call(&quot;rbind&quot;, lapply(sam, function(x) { lt[[x]][sample(1:nrow(lt[[x]]), 1), ] }))) }) monthLocsAll &lt;- do.call(rbind, monthLocs) table(monthLocsAll$month) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 Here is the result on the map of temperatures in January: ggplot() + geom_raster(data = data.frame(rasterToPoints(rast)), aes_string(x = &quot;x&quot;, y = &quot;y&quot;, fill = names(rast)[4])) + geom_sf(data = states, fill = NA, size = 0.2, colour = gray(0.2)) + geom_point(data = data.frame(wost), aes(x = x, y = y), shape = 20, size = 0.8, stroke = 0, colour = &quot;gray&quot;) + geom_point(data = subset(data.frame(monthLocsAll), month == 1), aes(x = x, y = y), shape = 15) + coord_sf(xlim = c(-92, -77.5), ylim = c(24.5, 35), expand = FALSE) + scale_fill_viridis(end = 0.8, alpha = 1, option = &quot;plasma&quot;) + labs(x = &quot;Latitude&quot;, y = &quot;Longitude&quot;, fill = expression(`Temperature `(degree ~ C))) + theme(legend.position = &quot;top&quot;, legend.justification = &quot;center&quot;) + guides(fill = guide_colourbar(barwidth = 15, barheight = 1, title.theme = element_text(size = 26))) Figure 2.4: Wood stork location data (blue dots), with January temperatures in the background and January locations in black. "],
["niches.html", "3 Climatic niches in space and time 3.1 Utilization distributions 3.2 Monthly climatic niches", " 3 Climatic niches in space and time 3.1 Utilization distributions For each month, we compute the density of GPS locations using a kernel estimator (kernelUD in adehabitatHR): monthKerAll &lt;- hab::kernelUD(monthLocsAll[&quot;month&quot;], grid = as(rast, &quot;SpatialPixels&quot;)) monthKerAllSp &lt;- estUDm2spixdf(monthKerAll) We illustrate it with the example of the temperatures in January: ggplot() + geom_raster(data = rastDF, aes_string(x = &quot;x&quot;, y = &quot;y&quot;, fill = names(rastDF)[4])) + geom_sf(data = states, fill = NA, size = 0.2, colour = gray(0.2)) + geom_point(data = data.frame(wost), aes(x = x, y = y), shape = 20, size = 0.8, stroke = 0, colour = &quot;gray&quot;) + geom_point(data = data.frame(monthLocs[[1]]), aes(x = x, y = y), shape = 20, size = 0.3) + geom_contour(data = data.frame(monthKerAll[[1]]), aes(x = Var2, y = Var1, z = ud), colour = &quot;black&quot;) + coord_sf(xlim = c(-92, -77.5), ylim = c(24.5, 35), expand = FALSE) + scale_fill_viridis(end = 0.8, alpha = 1, option = &quot;plasma&quot;) + labs(x = &quot;Latitude&quot;, y = &quot;Longitude&quot;) + theme(legend.position = &quot;none&quot;) Figure 3.1: Range estimation in January using kernel density estimator. Finally, we can quantify spatial overlap over time by estimating kernel overlap. To do this, we use the Bhattacharyya’s affinity (BA), a synthetic measure (i.e. symmetric), which is more appropriate to quantify the overall similarity of two UDs (see Fieberg and Kochanny (2005) for more details). class(monthKerAll) ## [1] &quot;estUDm&quot; overGeo &lt;- hab::kerneloverlap(monthKerAll, method = &quot;BA&quot;) round(overGeo, 2) ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 1 1.00 0.97 0.91 0.72 0.71 0.60 0.51 0.51 0.53 0.68 0.87 0.96 ## 2 0.97 1.00 0.94 0.76 0.74 0.64 0.54 0.54 0.55 0.69 0.87 0.95 ## 3 0.91 0.94 0.99 0.89 0.87 0.79 0.68 0.68 0.69 0.83 0.92 0.93 ## 4 0.72 0.76 0.89 0.99 0.99 0.95 0.86 0.85 0.84 0.91 0.86 0.79 ## 5 0.71 0.74 0.87 0.99 0.99 0.96 0.87 0.85 0.84 0.90 0.84 0.78 ## 6 0.60 0.64 0.79 0.95 0.96 1.00 0.95 0.93 0.92 0.93 0.79 0.68 ## 7 0.51 0.54 0.68 0.86 0.87 0.95 1.00 0.98 0.97 0.90 0.71 0.59 ## 8 0.51 0.54 0.68 0.85 0.85 0.93 0.98 1.00 0.98 0.91 0.71 0.60 ## 9 0.53 0.55 0.69 0.84 0.84 0.92 0.97 0.98 1.00 0.94 0.74 0.63 ## 10 0.68 0.69 0.83 0.91 0.90 0.93 0.90 0.91 0.94 1.00 0.89 0.78 ## 11 0.87 0.87 0.92 0.86 0.84 0.79 0.71 0.71 0.74 0.89 1.00 0.94 ## 12 0.96 0.95 0.93 0.79 0.78 0.68 0.59 0.60 0.63 0.78 0.94 0.99 ## attr(,&quot;method&quot;) ## [1] &quot;BA&quot; ## attr(,&quot;class&quot;) ## [1] &quot;kerneloverlap&quot; par(mar = c(4.5, 4.5, 0, 0) + 0.1) image(x = 1:12, y = 1:12, overGeo, asp = 1, col = viridis(100, direction = -1, option = &quot;plasma&quot;, alpha = 0.8), axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, cex.lab = 1.5) axis(1, at = 1:12, labels = month.abb, tick = FALSE, line = -0.7) axis(2, at = 1:12, labels = month.abb, tick = FALSE, line = -0.7) mtext(&quot;Month&quot;, side = 1, line = 2, cex = 1.5) mtext(&quot;Month&quot;, side = 2, line = 1.7, cex = 1.5) mtext(&quot;A) Geographic overlap&quot;, side = 3, line = 0.6, cex = 1.5) lab &lt;- expand.grid(x = 1:12, y = 1:12) lab$val &lt;- as.vector(round(overGeo * 100, 0)) text(lab$x, lab$y, lab$val, cex = 1 + (lab$val - 50)/100, col = ifelse(lab$val &gt;= 80, &quot;white&quot;, &quot;black&quot;)) polygon(x = c(rep(0:12 + 0.5, each = 2), rep(11:1 + 0.5, each = 2), 0.5), y = c(1, rep(0:11 + 0.5, each = 2), rep(12:1 + 0.5, each = 2)), col = grey(0.7), border = NA) abline(h = c(3.5, 10.5), v = c(3.5, 10.5), lwd = 4) lines(x = c(0, 2, 2) + 0.5, y = c(2, 2, 0) + 0.5, lwd = 4, lty = &quot;11&quot;) lines(x = c(0, 2, 2) + 0.5, y = c(10, 10, 12) + 0.5, lwd = 4, lty = &quot;11&quot;) polygon(x = c(5, 9, 9, 5) + 0.5, y = c(5, 5, 9, 9) + 0.5, lwd = 4, lty = &quot;11&quot;) lines(x = c(10, 10, 12) + 0.5, y = c(12, 10, 10) + 0.5, lwd = 4, lty = &quot;11&quot;) lines(x = c(10, 10, 12) + 0.5, y = c(0, 2, 2) + 0.5, lwd = 4, lty = &quot;11&quot;) Figure 3.2: Matrix of spatial overlap month-by-month. The map of the overlap reveals mostly two periods with heavy overlap (&gt; 80%), i.e. similar monthly distributions in the landscape: Winter, from November to March; Summer, from April to October, with June-September being over 90% overlap. 3.2 Monthly climatic niches Finally, we consider the monhtly climatic niches in the ecological space. For this, we need the yearly conditions, i.e. the rasters for the 12 months combined, as a reference frame: clim &lt;- values(rast) clim &lt;- na.omit(data.frame(prec = c(clim[, 1], clim[, 3], clim[, 5], clim[, 7], clim[, 9], clim[, 11], clim[, 13], clim[, 15], clim[, 17], clim[, 19], clim[, 21], clim[, 23]), temp = c(clim[, 2], clim[, 4], clim[, 6], clim[, 8], clim[, 10], clim[, 12], clim[, 14], clim[, 16], clim[, 18], clim[, 20], clim[, 22], clim[, 24]), month = rep(1:12, each = dim(rast)[1] * dim(rast)[2]))) dim(clim) ## [1] 22872 3 table(clim$month) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 1906 1906 1906 1906 1906 1906 1906 1906 1906 1906 1906 1906 cor(clim$prec, clim$temp) ## [1] 0.1826839 Note that, over Florida and the 12 months, the correlation between precipitation and temperature is fairly low. climMean &lt;- data.frame(do.call(rbind, by(clim[, 1:2], clim$month, colMeans, na.rm = TRUE))) locsMean &lt;- data.frame(do.call(rbind, lapply(monthLocs, function(x) colMeans(x@data[, c(&quot;prec&quot;, &quot;temp&quot;)], na.rm = TRUE)))) (climNiches &lt;- locsMean - climMean) ## prec temp ## 1 -56.736596 8.0292936 ## 2 -50.801219 6.8600189 ## 3 -51.298637 4.7433414 ## 4 -30.517845 2.3709531 ## 5 8.318321 1.6036885 ## 6 31.980398 0.6339109 ## 7 13.674096 0.3553282 ## 8 24.309066 0.4430989 ## 9 27.424084 1.1019436 ## 10 7.227975 3.1850390 ## 11 -27.819595 5.4216113 ## 12 -58.646488 6.9947208 We use once again January as an example for the climatic niches. In this representation, light gray points represent the overall (yearly) conditions in Florida; dark grey points are the climatic conditions of the month of interest (here January), and black points are the conditions actually experienced by wood stork (i.e. at the GPS locations). The arrows connects the mean conditions of the month to the mean used conditions. library(&quot;ggrepel&quot;) ggplot(clim, aes(x = prec, y = temp)) + geom_point(size = 0.1, colour = gray(0.9)) + geom_point(data = subset(clim, month == 1), pch = 15, colour = gray(0.7), size = 4) + geom_point(data = data.frame(monthLocs[[1]]), pch = 20) + geom_segment(aes(x = climMean$prec[1], xend = locsMean$prec[1], y = climMean$temp[1], yend = locsMean$temp[1]), arrow = arrow(), lineend = &quot;round&quot;, size = 4.5, arrow.fill = &quot;white&quot;) + geom_segment(aes(x = climMean$prec[1], xend = locsMean$prec[1], y = climMean$temp[1], yend = locsMean$temp[1]), arrow = arrow(), lineend = &quot;round&quot;, size = 2, colour = &quot;white&quot;) + geom_label_repel(data = data.frame(x = c(climMean$prec[1], locsMean$prec[1]), y = c(climMean$temp[1], locsMean$temp[1]), label = c(&quot;A&quot;, &quot;U&quot;)), aes(x = x, y = y, label = label), fill = c(gray(0.7), &quot;black&quot;), colour = c(&quot;black&quot;, &quot;white&quot;), size = 10, fontface = &quot;bold&quot;, force = 10, segment.color = NA) + annotate(&quot;text&quot;, x = 185, y = 18, hjust = 0, vjust = 0, size = 10, label = month.name[1]) + labs(x = &quot;Precipitation (mm)&quot;, y = expression(`Temperature `(degree ~ C))) ## Warning: Removed 35 rows containing missing values (geom_point). Figure 3.3: Climatic niche in environmental space in January. Now similarly to the geographic space, we can use data in a 2D-environmental space to compute kernel overlap. In this case, we use (standardized) temperature and precipitation values as the two coordinate axes to define monthly use (with month being the only column of a SpatialPointsDataFrame): colNA(monthLocsAll@data[, c(&quot;month&quot;, &quot;prec&quot;, &quot;temp&quot;)]) ## month prec temp ## 0 376 375 monthNiche &lt;- with(na.omit(monthLocsAll@data[, c(&quot;month&quot;, &quot;prec&quot;, &quot;temp&quot;)]), SpatialPointsDataFrame(data.frame(precN = (prec - min(prec))/(max(prec) - min(prec)), tempN = (temp - min(temp))/(max(temp) - min(temp))), data.frame(month))) summary(monthNiche) ## Object of class SpatialPointsDataFrame ## Coordinates: ## min max ## precN 0 1 ## tempN 0 1 ## Is projected: NA ## proj4string : [NA] ## Number of points: 59624 ## Data attributes: ## month ## Min. : 1.000 ## 1st Qu.: 3.000 ## Median : 6.000 ## Mean : 6.484 ## 3rd Qu.: 9.000 ## Max. :12.000 plot(monthNiche, col = factor(monthNiche$month)) Figure 3.4: Representation of the monthly climatic niches as a coordinates in a 2D-space (precipitation and temperature). The overlap can then be computed and plotted just like before: overClim &lt;- hab::kerneloverlap(monthNiche, method = &quot;BA&quot;) round(overClim, 2) ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 1 1.00 0.68 0.02 0.10 0.00 0.00 0.00 0.00 0.00 0.12 0.39 0.71 ## 2 0.68 1.00 0.08 0.20 0.00 0.00 0.00 0.00 0.00 0.19 0.37 0.54 ## 3 0.02 0.08 1.00 0.47 0.01 0.00 0.00 0.00 0.01 0.45 0.49 0.05 ## 4 0.10 0.20 0.47 1.00 0.06 0.00 0.00 0.00 0.08 0.53 0.45 0.06 ## 5 0.00 0.00 0.01 0.06 1.00 0.27 0.01 0.06 0.60 0.51 0.06 0.00 ## 6 0.00 0.00 0.00 0.00 0.27 1.00 0.49 0.60 0.69 0.15 0.00 0.00 ## 7 0.00 0.00 0.00 0.00 0.01 0.49 1.00 0.83 0.49 0.01 0.00 0.00 ## 8 0.00 0.00 0.00 0.00 0.06 0.60 0.83 1.00 0.58 0.05 0.00 0.00 ## 9 0.00 0.00 0.01 0.08 0.60 0.69 0.49 0.58 1.00 0.47 0.02 0.00 ## 10 0.12 0.19 0.45 0.53 0.51 0.15 0.01 0.05 0.47 1.00 0.33 0.09 ## 11 0.39 0.37 0.49 0.45 0.06 0.00 0.00 0.00 0.02 0.33 1.00 0.36 ## 12 0.71 0.54 0.05 0.06 0.00 0.00 0.00 0.00 0.00 0.09 0.36 1.00 ## attr(,&quot;method&quot;) ## [1] &quot;BA&quot; ## attr(,&quot;class&quot;) ## [1] &quot;kerneloverlap&quot; par(mar = c(4.5, 4.5, 0, 0) + 0.1) image(x = 1:12, y = 1:12, overClim, asp = 1, col = viridis(100, direction = -1, option = &quot;plasma&quot;, alpha = 0.8), axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, cex.lab = 1.5) axis(1, at = 1:12, labels = month.abb, tick = FALSE, line = -0.7) axis(2, at = 1:12, labels = month.abb, tick = FALSE, line = -0.7) mtext(&quot;Month&quot;, side = 1, line = 2, cex = 1.5) mtext(&quot;Month&quot;, side = 2, line = 1.7, cex = 1.5) mtext(&quot;B) Climatic overlap&quot;, side = 3, line = 0.6, cex = 1.5) lab &lt;- expand.grid(x = 1:12, y = 1:12) lab$val &lt;- as.vector(round(overClim * 100, 0)) text(lab$x, lab$y, lab$val, cex = 1 + (lab$val - 50)/100, col = ifelse(lab$val &gt;= 90, &quot;white&quot;, &quot;black&quot;)) polygon(x = c(rep(0:12 + 0.5, each = 2), rep(11:1 + 0.5, each = 2), 0.5), y = c(1, rep(0:11 + 0.5, each = 2), rep(12:1 + 0.5, each = 2)), col = grey(0.7), border = NA) lines(x = c(0, 2, 2) + 0.5, y = c(2, 2, 0) + 0.5, lwd = 4) lines(x = c(0, 2, 2) + 0.5, y = c(10, 10, 12) + 0.5, lwd = 4) polygon(x = c(5, 9, 9, 5) + 0.5, y = c(5, 5, 9, 9) + 0.5, lwd = 4) lines(x = c(10, 10, 12) + 0.5, y = c(12, 10, 10) + 0.5, lwd = 4) lines(x = c(10, 10, 12) + 0.5, y = c(0, 2, 2) + 0.5, lwd = 4) abline(h = c(3.5, 10.5), v = c(3.5, 10.5), lwd = 3, lty = &quot;11&quot;) Figure 3.5: Matrix of climatic overlap month-by-month. We can see that the overlap is a lot lower in the climatic space than in the geographic space. The map of the overlap reveals mostly two periods with marked overlap (generally &gt; 30%), i.e. similar monthly niches: Winter, from November to February; Summer, from June to September (summer being fairly consistent with overlaps &gt; 45%); Another way to look at it is to consider only monthly selections, by centering everything on the monthly available conditions. In the left panel, we can see the three groups (winter in blue, summer in red, intermediate migratory in purple). In the right panel, we can see the evolution in selection through time. mar &lt;- data.frame(prec = climNiches$prec, prec_end = climNiches$prec[c(2:12, 1)], temp_end = climNiches$temp[c(2:12, 1)], temp = climNiches$temp, month = c(&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;), abbr = c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;), nr = 1:12, season = c(rep(2, 4), 1, rep(3, 4), 1, 2, 2)) ggplot(data = mar, aes(x = prec, y = temp, colour = season, fill = season)) + geom_vline(xintercept = 0) + geom_hline(yintercept = 0) + geom_segment(aes(x = 0, y = 0, xend = prec, yend = temp), arrow = arrow(), lineend = &quot;round&quot;, size = 2) + geom_label_repel(aes(label = abbr), size = 6, fontface = &quot;bold&quot;, colour = &quot;white&quot;) + scale_color_viridis(end = 0.8, direction = -1, option = &quot;plasma&quot;) + scale_fill_viridis(end = 0.8, direction = -1, option = &quot;plasma&quot;) + xlim(-63, 40) + ylim(0, 8.2) + labs(x = &quot;Precipitation difference (mm)&quot;, y = expression(`Temperature difference `(degree ~ C))) + theme(legend.position = &quot;none&quot;) ggplot(data = mar, aes(x = prec, y = temp, xend = prec_end, yend = temp_end, colour = season, fill = season)) + geom_vline(xintercept = 0) + geom_hline(yintercept = 0) + geom_segment(arrow = arrow(), lineend = &quot;round&quot;, size = 2) + geom_label_repel(aes(label = nr), size = 6, fontface = &quot;bold&quot;, colour = &quot;white&quot;) + scale_color_viridis(end = 0.8, direction = -1, option = &quot;plasma&quot;) + scale_fill_viridis(end = 0.8, direction = -1, option = &quot;plasma&quot;) + xlim(-63, 40) + ylim(0, 8.2) + labs(x = &quot;Precipitation difference (mm)&quot;, y = expression(`Temperature difference `(degree ~ C))) + theme(legend.position = &quot;none&quot;) Figure 3.6: Monthly selection in the climatic space (left) and the yearly cycle (right). References "],
["figures.html", "4 Manuscript figures 4.1 Fig.1: Monthly ranges and climatic niches 4.2 Fig.2: Overlap matrices 4.3 Fig.3: Marginality 4.4 Metadata S1: Animation over the year", " 4 Manuscript figures This page provides the exact script for the manuscript’s figures. 4.1 Fig.1: Monthly ranges and climatic niches temp.range &lt;- range(as.vector(rast[[(1:12)*2]]), na.rm = TRUE) prec.range &lt;- range(as.vector(rast[[(1:12)*2-1]]), na.rm = TRUE) ## Get legends g1t &lt;- ggplot() + geom_raster(data = rastDF, aes_string(x = &quot;x&quot;, y = &quot;y&quot;, fill = names(rastDF)[4])) + scale_fill_viridis(end = .8, alpha = 1, option = &quot;plasma&quot;, limits = temp.range, breaks = (1:8)*5) + labs(x = &quot;Latitude&quot;, y = &quot;Longitude&quot;, fill = expression(&quot;Temperature &quot; ( degree~C))) + theme(legend.position = &quot;top&quot;, legend.justification = &quot;center&quot;) + guides(fill = guide_colourbar(barwidth = 15, barheight = 1, title.theme = element_text(size = 26))) temp_legend &lt;- cowplot::get_legend(g1t) g1p &lt;- ggplot() + geom_raster(data = rastDF, aes_string(x = &quot;x&quot;, y = &quot;y&quot;, fill = names(rastDF)[3])) + scale_fill_viridis(alpha = 1, direction = -1, option = &quot;cividis&quot;, limits = prec.range, breaks = (1:8)*50) + labs(x = &quot;Latitude&quot;, y = &quot;Longitude&quot;, fill = &quot;Precipitation (mm)&quot;) + theme(legend.position = &quot;top&quot;, legend.justification = &quot;center&quot;) + guides(fill = guide_colourbar(barwidth = 14, barheight = 1, title.theme = element_text(size = 26))) prec_legend &lt;- cowplot::get_legend(g1p) ## Loop over all months: for(i in 1:12){ plot_list &lt;- list() plot_list[[1]] &lt;- ggplot() + geom_raster(data = rastDF, aes_string(x = &quot;x&quot;, y = &quot;y&quot;, fill = names(rastDF)[i*2+2])) + geom_sf(data = states, fill = NA, size = .2, colour = gray(.2)) + geom_point(data = data.frame(wost), aes(x = x, y = y), shape = 20, size = .8, stroke = 0, colour = &quot;gray&quot;) + geom_point(data = data.frame(monthLocs[[i]]), aes(x = x, y = y), shape = 20, size = .3) + geom_contour(data = data.frame(monthKerAll[[i]]), aes(x = Var2, y = Var1, z = ud), colour = &quot;black&quot;) + coord_sf(xlim = c(-92, -77.5), ylim = c(24.5, 35), expand = FALSE) + scale_fill_viridis(end = .8, alpha = 1, option = &quot;plasma&quot;, limits = temp.range, breaks = (1:8)*5) + labs(x = &quot;Latitude&quot;, y = &quot;Longitude&quot;, fill = expression(&quot;Temperature &quot; ( degree~C))) + theme(legend.position = &quot;none&quot;) plot_list[[2]] &lt;- ggplot() + geom_raster(data = rastDF, aes_string(x = &quot;x&quot;, y = &quot;y&quot;, fill = names(rastDF)[i*2+1])) + geom_sf(data = states, fill = NA, size = .2, colour = gray(.2)) + geom_point(data = data.frame(wost), aes(x = x, y = y), shape = 20, size = .8, stroke = 0, colour = &quot;gray&quot;) + geom_point(data = data.frame(monthLocs[[i]]), aes(x = x, y = y), shape = 20, size = .3) + geom_contour(data = data.frame(monthKerAll[[i]]), aes(x = Var2, y = Var1, z = ud), colour = &quot;black&quot;) + coord_sf(xlim = c(-92, -77.5), ylim = c(24.5, 35), expand = FALSE) + scale_fill_viridis(alpha = 1, direction = -1, option = &quot;cividis&quot;, limits = prec.range, breaks = (1:8)*50) + labs(x = &quot;Latitude&quot;, y = &quot;Longitude&quot;) + theme(legend.position = &quot;none&quot;) plot_list[[3]] &lt;- ggplot(clim, aes(x = prec, y = temp)) + geom_point(colour = NA) + geom_point(data = subset(clim, month == i), pch = 15, colour = gray(.7), size = 4) + geom_point(data = data.frame(monthLocs[[i]]), pch = 20) + geom_segment(aes(x = climMean$prec[i], xend = locsMean$prec[i], y = climMean$temp[i], yend = locsMean$temp[i]), arrow = arrow(), lineend = &quot;round&quot;, size = 4.5, arrow.fill = &quot;white&quot;) + geom_segment(aes(x = climMean$prec[i], xend = locsMean$prec[i], y = climMean$temp[i], yend = locsMean$temp[i]), arrow = arrow(), lineend = &quot;round&quot;, size = 2, colour = &quot;white&quot;) + annotate(&quot;text&quot;, x = 185, y = 18, hjust = 0, vjust = 0, size = 10, label = month.name[i]) + labs(x = &quot;Precipitation (mm)&quot;, y = expression(&quot;Temperature &quot; ( degree~C))) assign(paste0(&quot;niche&quot;, i), plot_grid(temp_legend, prec_legend, NULL, plot_list[[1]], plot_list[[2]], plot_list[[3]], rel_heights = c(.15, 1), rel_widths = c(1.2, 1.2, 1), nrow = 2, ncol = 3)) ## cowplot::ggsave(paste0(&quot;Figures/niche-&quot;, i, &quot;.png&quot;), ## width = 7*3.4, height = 8.05) ## cowplot::ggsave(paste0(&quot;Figures/niche-&quot;, i, &quot;-web.png&quot;), ## width = 7*3.4, height = 8.05, dpi = 75) assign(paste0(&quot;g&quot;, i, &quot;t&quot;), plot_list[[1]]) assign(paste0(&quot;g&quot;, i, &quot;p&quot;), plot_list[[2]]) } ## Figure with January-May-August-October g1nAU &lt;- ggplot(clim, aes(x = prec, y = temp)) + geom_point(colour = NA) + geom_point(data = subset(clim, month == 1), pch = 15, colour = gray(.7), size = 4) + geom_point(data = data.frame(monthLocs[[1]]), pch = 20) + geom_segment(aes(x = climMean$prec[1], xend = locsMean$prec[1], y = climMean$temp[1], yend = locsMean$temp[1]), arrow = arrow(), lineend = &quot;round&quot;, size = 4.5, arrow.fill = &quot;white&quot;) + geom_segment(aes(x = climMean$prec[1], xend = locsMean$prec[1], y = climMean$temp[1], yend = locsMean$temp[1]), arrow = arrow(), lineend = &quot;round&quot;, size = 2, colour = &quot;white&quot;) + geom_label(data = data.frame(x = c(climMean$prec[1] - 15, locsMean$prec[1] + 25), y = c(climMean$temp[1] - 1, locsMean$temp[1] + .7), label = c(&quot;A&quot;, &quot;U&quot;)), aes(x = x, y = y, label = label), fill = c(gray(.9), &quot;black&quot;), colour = c(&quot;black&quot;, &quot;white&quot;), size = 12, fontface = &quot;bold&quot;) + annotate(&quot;text&quot;, x = 185, y = 18, hjust = 0, vjust = 0, size = 10, label = month.name[1]) + labs(x = &quot;Precipitation (mm)&quot;, y = expression(&quot;Temperature &quot; ( degree~C))) g5nAU &lt;- ggplot(clim, aes(x = prec, y = temp)) + geom_point(colour = NA) + geom_point(data = subset(clim, month == 5), pch = 15, colour = gray(.7), size = 4) + geom_point(data = data.frame(monthLocs[[5]]), pch = 20) + geom_segment(aes(x = climMean$prec[5], xend = locsMean$prec[5], y = climMean$temp[5], yend = locsMean$temp[5]), arrow = arrow(), lineend = &quot;round&quot;, size = 4.5, arrow.fill = &quot;white&quot;) + geom_segment(aes(x = climMean$prec[5], xend = locsMean$prec[5], y = climMean$temp[5], yend = locsMean$temp[5]), arrow = arrow(), lineend = &quot;round&quot;, size = 2, colour = &quot;white&quot;) + geom_label(data = data.frame(x = c(climMean$prec[5], locsMean$prec[5] + 5), y = c(climMean$temp[5] - 2, locsMean$temp[5] + 2), label = c(&quot;A&quot;, &quot;U&quot;)), aes(x = x, y = y, label = label), fill = c(gray(.9), &quot;black&quot;), colour = c(&quot;black&quot;, &quot;white&quot;), size = 12, fontface = &quot;bold&quot;) + annotate(&quot;text&quot;, x = 185, y = 18, hjust = 0, vjust = 0, size = 10, label = month.name[5]) + labs(x = &quot;Precipitation (mm)&quot;, y = expression(&quot;Temperature &quot; ( degree~C))) g8nAU &lt;- ggplot(clim, aes(x = prec, y = temp)) + geom_point(colour = NA) + geom_point(data = subset(clim, month == 8), pch = 15, colour = gray(.7), size = 4) + geom_point(data = data.frame(monthLocs[[8]]), pch = 20) + geom_segment(aes(x = climMean$prec[8], xend = locsMean$prec[8], y = climMean$temp[8], yend = locsMean$temp[8]), arrow = arrow(), lineend = &quot;round&quot;, size = 4.5, arrow.fill = &quot;white&quot;) + geom_segment(aes(x = climMean$prec[8], xend = locsMean$prec[8], y = climMean$temp[8], yend = locsMean$temp[8]), arrow = arrow(), lineend = &quot;round&quot;, size = 2, colour = &quot;white&quot;) + geom_label(data = data.frame(x = c(climMean$prec[8] - 5, locsMean$prec[8] + 5), y = c(climMean$temp[8] - 2, locsMean$temp[8] - 2), label = c(&quot;A&quot;, &quot;U&quot;)), aes(x = x, y = y, label = label), fill = c(gray(.9), &quot;black&quot;), colour = c(&quot;black&quot;, &quot;white&quot;), size = 12, fontface = &quot;bold&quot;) + annotate(&quot;text&quot;, x = 185, y = 18, hjust = 0, vjust = 0, size = 10, label = month.name[8]) + labs(x = &quot;Precipitation (mm)&quot;, y = expression(&quot;Temperature &quot; ( degree~C))) g10nAU &lt;- ggplot(clim, aes(x = prec, y = temp)) + geom_point(colour = NA) + geom_point(data = subset(clim, month == 10), pch = 15, colour = gray(.7), size = 4) + geom_point(data = data.frame(monthLocs[[10]]), pch = 20) + geom_segment(aes(x = climMean$prec[10], xend = locsMean$prec[10], y = climMean$temp[10], yend = locsMean$temp[10]), arrow = arrow(), lineend = &quot;round&quot;, size = 4.5, arrow.fill = &quot;white&quot;) + geom_segment(aes(x = climMean$prec[10], xend = locsMean$prec[10], y = climMean$temp[10], yend = locsMean$temp[10]), arrow = arrow(), lineend = &quot;round&quot;, size = 2, colour = &quot;white&quot;) + geom_label(data = data.frame(x = c(climMean$prec[10] + 20, locsMean$prec[10] + 20), y = c(climMean$temp[10] - .7, locsMean$temp[10] - .7), label = c(&quot;A&quot;, &quot;U&quot;)), aes(x = x, y = y, label = label), fill = c(gray(.9), &quot;black&quot;), colour = c(&quot;black&quot;, &quot;white&quot;), size = 12, fontface = &quot;bold&quot;) + annotate(&quot;text&quot;, x = 185, y = 18, hjust = 0, vjust = 0, size = 10, label = month.name[10]) + labs(x = &quot;Precipitation (mm)&quot;, y = expression(&quot;Temperature &quot; ( degree~C))) plot_grid(temp_legend, prec_legend, NULL, g1t, g1p, g1nAU, g5t, g5p, g5nAU, g8t, g8p, g8nAU, g10t, g10p, g10nAU, nrow = 5, ncol = 3, rel_widths = c(1.2, 1.2, 1), rel_heights = c(.15, 1, 1, 1, 1)) cowplot::ggsave(&quot;Figures/niche-print.png&quot;, width = 7*3.4, height = 7*4+1.05, dpi = 150) Figure 4.1: Wood stork monthly range (left and center) and climatic niche (right) during January, May, August and October. Range maps show current GPS locations in a given month in black with kernel contour lines, and all locations from the entire dataset shown as a reference in gray, on a background of temperature (left, from blue for colder temperatures to red for warmer temperatures) or precipitations (center, from yellow for dry conditions to blue for wet conditions). Climatic niches show current conditions used in a given month (precipitation on the X-axis, and temperature on the Y-axis) in black, in comparison to conditions available in the study area in a given month in gray. The marginality arrow defines the difference between average available conditions (“A”) and average used conditions (“U”). 4.2 Fig.2: Overlap matrices par(mar = c(3, 3, 2, 0.1) + 0.4, mfrow = c(1, 2)) image(x = 1:12, y = 1:12, overGeo, asp = 1, col = viridis(100, direction = -1, option = &quot;plasma&quot;, alpha = 0.8), axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, cex.lab = 1.5) axis(1, at = 1:12, labels = month.abb, tick = FALSE, line = -0.7) axis(2, at = 1:12, labels = month.abb, tick = FALSE, line = -0.7) mtext(&quot;Month&quot;, side = 1, line = 2, cex = 1.5) mtext(&quot;Month&quot;, side = 2, line = 1.7, cex = 1.5) mtext(&quot;A) Geographic overlap&quot;, side = 3, line = 0.6, cex = 1.5) lab &lt;- expand.grid(x = 1:12, y = 1:12) lab$val &lt;- as.vector(round(overGeo * 100, 0)) text(lab$x, lab$y, lab$val, cex = 1 + (lab$val - 50)/100, col = ifelse(lab$val &gt;= 80, &quot;white&quot;, &quot;black&quot;)) polygon(x = c(rep(0:12 + 0.5, each = 2), rep(11:1 + 0.5, each = 2), 0.5), y = c(1, rep(0:11 + 0.5, each = 2), rep(12:1 + 0.5, each = 2)), col = grey(0.7), border = NA) abline(h = c(3.5, 10.5), v = c(3.5, 10.5), lwd = 4) lines(x = c(0, 2, 2) + 0.5, y = c(2, 2, 0) + 0.5, lwd = 4, lty = &quot;11&quot;) lines(x = c(0, 2, 2) + 0.5, y = c(10, 10, 12) + 0.5, lwd = 4, lty = &quot;11&quot;) polygon(x = c(5, 9, 9, 5) + 0.5, y = c(5, 5, 9, 9) + 0.5, lwd = 4, lty = &quot;11&quot;) lines(x = c(10, 10, 12) + 0.5, y = c(12, 10, 10) + 0.5, lwd = 4, lty = &quot;11&quot;) lines(x = c(10, 10, 12) + 0.5, y = c(0, 2, 2) + 0.5, lwd = 4, lty = &quot;11&quot;) image(x = 1:12, y = 1:12, overClim, asp = 1, col = viridis(100, direction = -1, option = &quot;plasma&quot;, alpha = 0.8), axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, cex.lab = 1.5) axis(1, at = 1:12, labels = month.abb, tick = FALSE, line = -0.7) axis(2, at = 1:12, labels = month.abb, tick = FALSE, line = -0.7) mtext(&quot;Month&quot;, side = 1, line = 2, cex = 1.5) mtext(&quot;Month&quot;, side = 2, line = 1.7, cex = 1.5) mtext(&quot;B) Climatic overlap&quot;, side = 3, line = 0.6, cex = 1.5) lab &lt;- expand.grid(x = 1:12, y = 1:12) lab$val &lt;- as.vector(round(overClim * 100, 0)) text(lab$x, lab$y, lab$val, cex = 1 + (lab$val - 50)/100, col = ifelse(lab$val &gt;= 90, &quot;white&quot;, &quot;black&quot;)) polygon(x = c(rep(0:12 + 0.5, each = 2), rep(11:1 + 0.5, each = 2), 0.5), y = c(1, rep(0:11 + 0.5, each = 2), rep(12:1 + 0.5, each = 2)), col = grey(0.7), border = NA) lines(x = c(0, 2, 2) + 0.5, y = c(2, 2, 0) + 0.5, lwd = 4) lines(x = c(0, 2, 2) + 0.5, y = c(10, 10, 12) + 0.5, lwd = 4) polygon(x = c(5, 9, 9, 5) + 0.5, y = c(5, 5, 9, 9) + 0.5, lwd = 4) lines(x = c(10, 10, 12) + 0.5, y = c(12, 10, 10) + 0.5, lwd = 4) lines(x = c(10, 10, 12) + 0.5, y = c(0, 2, 2) + 0.5, lwd = 4) abline(h = c(3.5, 10.5), v = c(3.5, 10.5), lwd = 3, lty = &quot;11&quot;) dev.copy2pdf(file = &quot;Figures/overlap-both.pdf&quot;, width = 13.25, height = 7) ## png ## 2 Figure 4.2: Matrices of A) geographic and B) climatic overlap during the year. Each matrix provides Bhattacharyya’s affinity as a percentage (between 0 and 100, higher values corresponding to darker color), as a measure of overlap between two months \\(i\\) (rows) and \\(j\\) (columns). The main diagonal, where \\(i = j\\) is grayed out as all values equal \\(1\\). Consistent seasons in a given space are highlighted with a bold line, while seasons identified in the other space are highlighted with a dotted line for reference. 4.3 Fig.3: Marginality ggplot(data = mar, aes(x = prec, y = temp, colour = season, fill = season)) + geom_vline(xintercept = 0) + geom_hline(yintercept = 0) + geom_segment(aes(x = 0, y = 0, xend = prec, yend = temp), arrow = arrow(), lineend = &quot;round&quot;, size = 2) + geom_label_repel(data = subset(mar, prec &lt; 10), aes(label = abbr), size = 6, direction = &quot;x&quot;, nudge_y = .3, fontface = &quot;bold&quot;, colour = &quot;white&quot;) + geom_label_repel(data = subset(mar, prec &gt; 10), aes(label = abbr), size = 6, direction = &quot;both&quot;, nudge_x = 3, force = 0.015, fontface = &quot;bold&quot;, colour = &quot;white&quot;) + scale_color_viridis(end = .8, direction = -1, option = &quot;plasma&quot;) + scale_fill_viridis(end = .8, direction = -1, option = &quot;plasma&quot;) + xlim(-63, 40) + ylim(0, 8.2) + labs(x = &quot;Precipitation difference (mm)&quot;, y = expression(&quot;Temperature difference &quot; ( degree~C))) + theme(legend.position=&quot;none&quot;) cowplot::ggsave(&quot;Figures/marginality.pdf&quot;) ## Saving 7 x 7 in image Figure 4.3: Seasonal variation in marginality, as measured by the difference between climatic conditions at wood stork GPS locations vs. the entire study area for each month. Each arrow represents selection in a given month for both precipitation (X-axis) and temperature (Y-axis): Wood storks select drier and warmer areas during the winter (November–April in fuchsia), wetter areas during the summer (June–September in dark blue), and intermediate conditions in transitional seasons (May and October in orange). 4.4 Metadata S1: Animation over the year library(&quot;magick&quot;) img &lt;- image_graph(1785, 603) niche1 niche2 niche3 niche4 niche5 niche6 niche7 niche8 niche9 niche10 niche11 niche12 dev.off() animation &lt;- image_animate(img, fps = 1/1.5) image_write(animation, &quot;Figures/niche-anim.gif&quot;) system(&quot;convert Figures/niche-anim.gif Figures/niche-anim.mp4&quot;) system(&quot;convert Figures/niche-anim.gif Figures/niche-anim.mov&quot;) knitr::include_graphics(&quot;Figures/niche-anim.gif&quot;) Figure 4.4: In this animation (available as ‘Video_S1.gif’, ‘Video_S1.mp4’, and ‘Video_S1.mov’), each panel presents wood stork monthly ranges (left and center) and climatic niche (right) during the year. Range maps show current GPS locations in a given month in black with kernel contour lines, and all locations from the entire dataset shown as a reference in gray, on a background of temperature (left, from blue for colder temperatures to red for warmer temperatures) or precipitations (center, from yellow for dry conditions to blue for wet conditions). Climatic niches show current conditions used in a given month (precipitation on the X-axis, and temperature on the Y-axis) in black, in comparison to conditions available in the study area in a given month in gray. The marginality arrow defines the difference between average available conditions and average used conditions. "],
["session.html", "5 R session information", " 5 R session information ## R version 3.3.3 (2017-03-06) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Debian GNU/Linux 9 (stretch) ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] RColorBrewer_1.1-2 ggrepel_0.8.1 lubridate_1.7.4 ## [4] viridis_0.5.1 viridisLite_0.3.0 maps_3.3.0 ## [7] sf_0.8-0 rgeos_0.5-2 raster_3.0-7 ## [10] rgdal_1.4-4 hab_1.20.4 adehabitatHR_0.4.16 ## [13] deldir_0.1-23 adehabitatLT_0.3.24 CircStats_0.2-6 ## [16] boot_1.3-18 MASS_7.3-45 adehabitatMA_0.3.13 ## [19] ade4_1.7-13 sp_1.3-1 cowplot_0.9.4 ## [22] ggplot2_3.2.1 conflicted_1.0.4.9000 basr_0.12 ## [25] cowsay_0.7.0 ## ## loaded via a namespace (and not attached): ## [1] rmsfact_0.0.3 Rcpp_1.0.2 lattice_0.20-34 ## [4] class_7.3-14 assertthat_0.2.1 digest_0.6.22 ## [7] R6_2.4.0 evaluate_0.14 e1071_1.7-2 ## [10] highr_0.8 pillar_1.4.2 rlang_0.4.1 ## [13] lazyeval_0.2.2 rstudioapi_0.10 rmarkdown_1.16 ## [16] labeling_0.3 stringr_1.4.0 foreign_0.8-72 ## [19] munsell_0.5.0 compiler_3.3.3 xfun_0.10 ## [22] pkgconfig_2.0.3 htmltools_0.4.0 tidyselect_0.2.5 ## [25] tibble_2.1.3 gridExtra_2.3 bookdown_0.14 ## [28] codetools_0.2-15 crayon_1.3.4 dplyr_0.8.3 ## [31] withr_2.1.2 grid_3.3.3 gtable_0.3.0 ## [34] DBI_1.0.0 magrittr_1.5 formatR_1.7 ## [37] units_0.6-5 scales_1.0.0.9000 KernSmooth_2.23-15 ## [40] stringi_1.4.3 fortunes_1.5-4 tools_3.3.3 ## [43] glue_1.3.1 purrr_0.3.3 yaml_2.2.0 ## [46] colorspace_1.4-1 maptools_0.9-8 classInt_0.4-2 ## [49] memoise_1.1.0 knitr_1.25 "],
["references.html", "6 References", " 6 References "]
]
